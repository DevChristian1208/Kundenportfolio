{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/christianseidel/Desktop/Coding/Customer-portfolio-main/Kundenportfolio/src/app/api/contact/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport nodemailer from \"nodemailer\";\n\n// POST-Methode für die API definieren\nexport async function POST(request: NextRequest) {\n  try {\n    // Extrahiere die Daten aus der Anfrage\n    const data = await request.json();\n    const { name, email, phone, message } = data;\n\n    // Validierung der Pflichtfelder\n    if (!name || !email || !message) {\n      return NextResponse.json(\n        { error: \"Bitte alle Pflichtfelder ausfüllen.\" },\n        { status: 400 }\n      );\n    }\n\n    // Erstelle den SMTP-Transporter für Nodemailer\n    const transporter = nodemailer.createTransport({\n      host: process.env.SMTP_HOST,        // Host deines SMTP-Servers\n      port: Number(process.env.SMTP_PORT), // SMTP Port (z.B. 465 für SSL)\n      secure: process.env.SMTP_SECURE === \"true\",  // Wenn der Port 465 ist, dann true\n      auth: {\n        user: process.env.SMTP_USER,      // Dein SMTP-Benutzer (E-Mail)\n        pass: process.env.SMTP_PASS,      // Dein SMTP-Passwort\n      },\n    });\n\n    // E-Mail-Optionen definieren\n    const mailOptions = {\n      from: process.env.SMTP_USER,     // Absender\n      replyTo: email,                  // Antwort an die Absender-E-Mail-Adresse\n      to: process.env.SMTP_USER,       // E-Mail-Adresse, an die die Nachricht gesendet wird\n      subject: `Neue Nachricht von ${name}`,\n      text: `Name: ${name}\\nEmail: ${email}\\nPhone: ${phone}\\n\\n${message}`, // E-Mail-Inhalt\n    };\n\n    // Sende die E-Mail\n    await transporter.sendMail(mailOptions);\n\n    // Erfolgreiche Antwort zurückgeben\n    return NextResponse.json(\n      { message: \"Mail erfolgreich gesendet!\" },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(\"Fehler beim Verarbeiten:\", error);\n    // Fehlerhafte Antwort zurückgeben\n    return NextResponse.json(\n      { error: \"Fehler beim Verarbeiten der Anfrage. Bitte versuche es später erneut.\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,uCAAuC;QACvC,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;QAExC,gCAAgC;QAChC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,+CAA+C;QAC/C,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YAC7C,MAAM,QAAQ,GAAG,CAAC,SAAS;YAC3B,MAAM,OAAO,QAAQ,GAAG,CAAC,SAAS;YAClC,QAAQ,QAAQ,GAAG,CAAC,WAAW,KAAK;YACpC,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,SAAS;gBAC3B,MAAM,QAAQ,GAAG,CAAC,SAAS;YAC7B;QACF;QAEA,6BAA6B;QAC7B,MAAM,cAAc;YAClB,MAAM,QAAQ,GAAG,CAAC,SAAS;YAC3B,SAAS;YACT,IAAI,QAAQ,GAAG,CAAC,SAAS;YACzB,SAAS,CAAC,mBAAmB,EAAE,MAAM;YACrC,MAAM,CAAC,MAAM,EAAE,KAAK,SAAS,EAAE,MAAM,SAAS,EAAE,MAAM,IAAI,EAAE,SAAS;QACvE;QAEA,mBAAmB;QACnB,MAAM,YAAY,QAAQ,CAAC;QAE3B,mCAAmC;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA6B,GACxC;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,kCAAkC;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwE,GACjF;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}